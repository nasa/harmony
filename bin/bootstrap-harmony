#!/bin/bash

# run harmony from scratch

# check for docker
if ! command -v "docker" &> /dev/null; then
    echo "'docker' command not found. Harmony requires a running Docker environment."
    exit 1;
fi

# check for kubectl command
if ! command -v "kubectl" &> /dev/null; then
    echo "'kubectl' command not found. Harmony requires a running Kubernetes cluster with the 'kubectl' command in your path."
    exit 1;
fi

# read EDL credentials and other vars from .env file if it exists, otherwise prompt for them
export EXEC_CONTEXT
if [[ -f ".env" ]]; then
    source .env
else
    ./bin/create-dotenv
    source .env
fi

# Validate environment
if [ "${USE_EDL_CLIENT_APP}" == "false" ]; then
  if [ -z "${EDL_TOKEN}" ]; then
    echo "Error: EDL_TOKEN must be set when USE_EDL_CLIENT_APP is 'false'."
    exit 1
  fi
fi

# Used to decide whether or not to run harmony in k8s
export LOCAL_DEV
export KUBE_CONTEXT

# Use the arm64 version of the stable images if on an arm64 machine unless an explicit image has been set
if [[ $(uname -m) == 'arm64' ]]; then
  echo "We appear to be running on an arm64 platform"
  if [[ -z "$HARMONY_IMAGE" ]]; then
    export HARMONY_IMAGE=harmonyservices/harmony:stable-arm64
  fi
  if [[ -z "$SERVICE_RUNNER_IMAGE" ]]; then
    export SERVICE_RUNNER_IMAGE=harmonyservices/service-runner:stable-arm64
  fi
  if [[ -z "$QUERY_CMR_IMAGE" ]]; then
    export QUERY_CMR_IMAGE=harmonyservices/query-cmr:stable-arm64
  fi
  if [[ -z "$WORK_ITEM_SCHEDULER_IMAGE" ]]; then
    export WORK_ITEM_SCHEDULER_IMAGE=harmonyservices/work-scheduler:stable-arm64
  fi
  if [[ -z "$WORK_ITEM_UPDATER_IMAGE" ]]; then
    export WORK_ITEM_UPDATER_IMAGE=harmonyservices/work-updater:stable-arm64
  fi
  if [[ -z "$WORK_FAILER_IMAGE" ]]; then
    export WORK_FAILER_IMAGE=harmonyservices/work-failer:stable-arm64
  fi
  if [[ -z "$CRON_SERVICE_IMAGE" ]]; then
    export CRON_SERVICE_IMAGE=harmonyservices/cron-service:stable-arm64
  fi
fi

# run localstack, postgresql, and harmony in kubernetes
./bin/start-all

# deploy the services
echo ""
echo "Deploying services"
./bin/deploy-services

