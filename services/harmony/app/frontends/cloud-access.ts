import { Credentials } from '@aws-sdk/client-sts';
import { Response, NextFunction } from 'express';
import SecureTokenService from '../util/sts';
import { ServerError } from '../util/errors';
import HarmonyRequest from '../models/harmony-request';
import RequestContext from '../models/request-context';

import env from '../util/env';
import { asyncLocalStorage } from '../util/async-store';

const { sameRegionAccessRole, awsDefaultRegion } = env;

// Allow tokens to last up to 8 hours - no reason to make this a configuration yet
const expirationSeconds = 3600 * 8;

/**
 * Makes a call to assume a role that has access to S3 outputs generated by Harmony
 *
 * @param context - The request context
 * @param username - The user making the request
 * @returns credentials to act as that role
 */
async function assumeS3OutputsRole(
  context: RequestContext, username: string,
): Promise<Credentials> {
  const { id } = context;
  const params = {
    RoleArn: sameRegionAccessRole,
    RoleSessionName: username,
    DurationSeconds: expirationSeconds,
    ExternalId: id,
  };
  const sts = new SecureTokenService();
  const response = await sts.assumeRole(params);
  return response.Credentials;
}

/**
 * Express.js handler that handles the cloud access JSON endpoint (/cloud-access)
 *
 * @param req - The request sent by the client
 * @param res - The response to send to the client
 * @param next - The next function in the call chain
 * @returns Resolves when the request is complete
 */
export async function cloudAccessJson(
  req: HarmonyRequest, res: Response, next: NextFunction,
): Promise<void> {
  const context = asyncLocalStorage.getStore();
  context.logger = context.logger.child({ component: 'cloudAccess.cloudAccessJson' });
  context.logger.info(`Generating same region access keys for ${req.user}`);
  try {
    const credentials = await assumeS3OutputsRole(context, req.user);
    res.send(credentials);
  } catch (e) {
    context.logger.error(e);
    next(new ServerError('Failed to assume role to generate access keys.'));
  }
}

const preamble = '#!/bin/sh\n# Source this file to set keys to access Harmony S3 outputs '
  + `within the ${awsDefaultRegion} region.\n`;

const awsFieldMappings = {
  AccessKeyId: 'AWS_ACCESS_KEY_ID',
  SecretAccessKey: 'AWS_SECRET_ACCESS_KEY',
  SessionToken: 'AWS_SESSION_TOKEN',
};

/**
 * Express.js handler that handles the cloud access shell endpoint (/cloud-access.sh)
 *
 * @param req - The request sent by the client
 * @param res - The response to send to the client
 * @returns Resolves when the request is complete
 */
export async function cloudAccessSh(req, res): Promise<void> {
  const context = asyncLocalStorage.getStore();
  context.logger = context.logger.child({ component: 'cloudAccess.cloudAccessSh' });
  context.logger.info(`Generating same region access keys for ${req.user}`);
  res.set('Content-Type', 'application/x-sh');
  try {
    const credentials = await assumeS3OutputsRole(context, req.user);
    let response = preamble;
    response += `# Keys will expire on ${credentials.Expiration.toUTCString()}\n\n`;
    for (const key of Object.keys(awsFieldMappings)) {
      response += `export ${awsFieldMappings[key]}='${credentials[key]}'\n`;
    }
    res.send(response);
  } catch (e) {
    context.logger.error(e);
    res.status(500);
    res.send('>&2 echo "Error: Failed to assume role to generate access keys."');
  }
}
