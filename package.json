{
  "name": "harmony",
  "version": "0.0.0",
  "description": "Data services frontend",
  "main": "index.js",
  "scripts": {
    "test": "better-npm-audit audit && lerna run test --load-env-files=false",
    "test-fast": "lerna run test-fast --load-env-files=false",
    "test-bail": "lerna run test-bail --load-env-files=false",
    "coverage": "lerna run coverage --load-env-files=false",
    "lint": "lerna run lint",
    "start": "cd services/harmony && NODE_OPTIONS=--max-old-space-size=3096 ts-node -r tsconfig-paths/register app/server.ts",
    "start-dev": "cd services/harmony && strict-npm-engines && ts-node-dev --no-notify -r tsconfig-paths/register --watch app/views,public/js --respawn app/server",
    "start-dev-fast": "cd services/harmony && TS_NODE_TRANSPILE_ONLY=true ts-node-dev --no-notify -r tsconfig-paths/register --respawn --inspect=127.0.0.1:${DEBUG_PORT:-9200} app/server",
    "update-dev": "npm install && lerna run build && bin/restart-services",
    "watch-debug": "cd services/harmony && TS_NODE_TRANSPILE_ONLY=true node --watch -r tsconfig-paths/register -r ts-node/register app/server.ts --inspect=5858",
    "postinstall": "if test \"$NODE_ENV\" != \"production\" && test \"$LERNA\" != \"false\" ; then lerna exec --concurrency 1 -- npm install --no-save; fi",
    "build": "lerna exec --scope=harmony -- VERSION=${VERSION:-latest} npm run build",
    "build-m1": "lerna exec --scope=harmony -- VERSION=${VERSION:-latest} npm run build-m1",
    "build-sequential": "lerna exec --ignore harmony --concurrency 1 -- VERSION=${VERSION:-latest} npm run build",
    "build-all": "lerna exec --ignore harmony -- VERSION=${VERSION:-latest} npm run build",
    "build-all-m1": "lerna exec --ignore harmony -- VERSION=${VERSION:-latest} npm run build-m1",
    "push-image-all": "lerna exec --ignore harmony --ignore @harmony/util --concurrency 1 -- ./bin/push-image ${VERSION:-latest}",
    "build-notebooks-image": "docker build --platform linux/amd64 -t harmonyservices/notebooks:${VERSION:-latest} -f Dockerfile-notebooks .",
    "run-notebooks-image": "source .env && docker run -i -t --platform linux/amd64 --init -p 8888:8888 --env NB_EDL_USERNAME=\"${NB_EDL_USERNAME}\" --env NB_EDL_PASSWORD=\"${NB_EDL_PASSWORD}\" harmonyservices/notebooks:${VERSION:-latest}",
    "publish": "lerna exec --scope=harmony -- VERSION=${VERSION:-latest} npm run publish ",
    "compare-services": "SKIP_ENV_VALIDATION=true ts-node scripts/service-comparison.ts",
    "better-audit": "better-npm-audit audit && lerna run better-audit",
    "better-audit-output": "better-npm-audit audit && lerna run better-audit --parallel --stream"
  },
  "keywords": [
    "NASA",
    "EOSDIS",
    "Harmony",
    "Services",
    "Cumulus"
  ],
  "engines": {
    "node": "^22.14.0",
    "npm": ">=8"
  },
  "nyc": {
    "all": true,
    "check-coverage": true,
    "extension": [
      ".ts",
      ".tsx"
    ],
    "exclude": [
      "**/*.d.ts"
    ],
    "lines": 70,
    "reporter": [
      "lcov",
      "text"
    ],
    "include": [
      "app/**/*.ts",
      "example/**/*.ts"
    ]
  },
  "author": "NASA EOSDIS Harmony team",
  "license": "Apache-2.0",
  "devDependencies": {
    "@types/chai": "^5.0.1",
    "@types/mocha": "^10.0.7",
    "better-npm-audit": "^3.7.3",
    "chai": "^5.1.1",
    "copyfiles": "^2.4.1",
    "eslint-config-airbnb-typescript": "^18.0.0",
    "eslint-plugin-import": "^2.29.1",
    "eslint-plugin-jsdoc": "^50.0.0",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-tsdoc": "^0.4.0",
    "knex": "^3.1.0",
    "lerna": "^8.1.8",
    "mocha": "^11.0.1",
    "mocha-junit-reporter": "^2.2.1",
    "mocha-multi": "^1.1.7",
    "pg": "^8.12.0",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0"
  },
  "overrides": {
    "cross-spawn": "7.0.5",
    "@octokit/plugin-paginate-rest": "^9.2.2"
  }
}
